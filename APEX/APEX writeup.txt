The first message to decode is: IEEOMPUKSOATWUYEEYOMHSHHRLSEYM
We are also given a number: 236514

After some consideration, we realised that the encrypted message could be from a transposition cipher encryption.
Going to a transposition cipher decoder tool, https://www.dcode.fr/vigenere-cipher, we could obtain the first message
by using 236514 as the key.

First decoded message: HIPLEASEUSETHEKEYWHOSYOURMOMMY

Hence, it seems as if we have obtained another key: WHOSYOURMOMMY

The next encrypted message that we obtained (in string.printable) was -> :OW+iW-b&VQ6$(HUcqhepd8fficffcrgeof8jfio88pp8ok6gd4
Decoding it with string.printable gives:
[77, 50, 58, 72, 18, 58, 74, 11, 67, 57, 52, 6, 65, 69, 43, 56, 12, 26, 17, 14, 25, 13, 8, 15, 15, 18, 12, 15, 15, 12, 27, 16, 14, 24, 15, 8, 19, 15, 18, 24, 8, 8, 25, 25, 8, 24, 20, 6, 16, 13, 4]

Decoding "WHOSYOURMOMMY" with string.printable gives:
[58, 43, 50, 54, 60, 50, 56, 53, 48, 50, 48, 48, 60]

Applying a Vignere-cipher to this and normalizing to the first character of the alphabet ("a") (message = (plaintext - key)%len(string.printable) + string.printable.find("a")) gives:
[29, 17, 18, 28, 68, 18, 28, 68, 29, 17, 14, 68, 15, 21, 10, 16, 68, 76, 77, 68, 82, 75, 68, 77, 77, 68, 64, 82, 75, 68, 77, 76, 68, 81, 77, 68, 81, 77, 68, 76, 75, 68, 81, 75, 68, 78, 77, 68, 76, 75, 66]
which decodes to:
this'is'the'flag'/:'?.'::'#?.':/'>:'>:'/.'>.';:'/.%

' is clearly used as a space, so this can be written as
this is the flag /: ?. :: #?. :/ >: >: /. >. ;: /.%

The punctuation portion ([76, 77, 68, 82, 75, 68, 77, 77, 68, 64, 82, 75, 68, 77, 76, 68, 81, 77, 68, 81, 77, 68, 76, 75, 68, 81, 75, 68, 78, 77, 68, 76, 75, 66])
 was analyzed to be able to be converted to numbers (besides the # and %) as they all lay in a range of 10 from lowest to highest. This was based on a hint that the group later clarified.
Based on the hint "Nokia" that was given, it was likely that the numbers would form some sort of text when entered into a phone dialpad, and thus would need to lie between 0-9.
However, there were three possible modulus values where they would lie in the range: 73,74,75, which would give the following sequence of numbers
73: 34 92 44  92 43 84 84 32 82 54 32 
74: 23 81 33  81 32 73 73 21 71 43 21 
75: 12 70 22  70 21 62 62 10 60 32 10
Note that the # and % were removed before the modulus and the double space between the 3rd and 4th pairs are due to the #.

Each pair of numbers were interpreted as <key><number of presses>, i.e. the first pair for 74 would be press the 2 key thrice.
73 and 75 are both unlikely as the 3 key is only assigned to 3 characters, thus it does not make sense to press it 4 times, and it does not make sense to press the 7 key 0 times for 75.

Thus, the remaining sequence should be:
222 8 33 8 33 777 777 2 7 444 2

Decoding this based on the dialpad gives:
CTFTERRAPIA
which was rearranged based on their format to be:
CTF{TERRAPIA}

##
Further inspection and conversation with the group has led us to believe that decoding the key WHOSYOURMOMMY in string.printable was incorrect and it should have been done using string.ascii_uppercase instead,
with A = 0, B = 1 ... , W= 22, ..., Z=25.
This likely lead to the above further need to decode the punctuation which should have been numbers in the first place.
This was NOT made clear in the challenge statement, which only has string.printable as the given encoding, thus we used string.printable.